--- /usr/local/rosetta/tools/antibody/antibody.py	2015-06-19 13:58:33.015575898 -0400
+++ antibody.py	2015-06-19 13:55:36.117576042 -0400
@@ -792,99 +792,6 @@
     FRL = print_seq_FR_L1 + print_seq_FR_L2 + print_seq_FR_L3 + print_seq_FR_L4
     FRH = print_seq_FR_H1 + print_seq_FR_H2 + print_seq_FR_H3 + print_seq_FR_H4
 
-	# ==========================================================================================================================
-	# Edited by: Schenkelberg, Christian D.
-	# Date: 5-26-2015
-	# Problem: If FRL or FRH do not match the given lengths below, they cannot be modeled because other lengths do not exist
-    #          in the Rosetta Antibody database
-	# Solution: If the length is too short, then attempt to extend FRL/FRH by adding residues from FR1 or FR4, which represent
-    #           residues on the N-terminal or C-terminal end of the framework region respectively (so it does not affect the
-    #           CDRs or the intervening regions between CDRs
-    # BEGIN INSERTION
-    FR_data = []
-    FR_data.append([FRL, FR_L1, FR_L4, print_seq_FR_L1, print_seq_FR_L2, print_seq_FR_L3, print_seq_FR_L4, 58, 60, "light"])
-    FR_data.append([FRH, FR_H1, FR_H4, print_seq_FR_H1, print_seq_FR_H2, print_seq_FR_H3, print_seq_FR_H4, 63, 65, "heavy"])
-    for [FR, FR_1, FR_4, print_seq_FR_1, print_seq_FR_2, print_seq_FR_3, print_seq_FR_4, len1, len2, chainType] in FR_data:
-		if (len(FR) < len1):
-			# Calculate how many extra residues we need
-			offset = len1 - len(FR)
-			# Try to take an equal number of extra residues from each side of the CDR region
-			if (offset % 2 == 0):
-				FR1_offset = offset / 2
-				FR4_offset = offset / 2
-			else:
-				FR1_offset = offset / 2 + 1
-				FR4_offset = offset / 2
-			# Find the extra regions on FR1 and FR4 that have extra residues
-			extra_FR1 = FR_1[0:FR_1.index(print_seq_FR_1)]
-			extra_FR4 = FR_4[FR_4.index(print_seq_FR_4)+len(print_seq_FR_4):]
-			# If it's not possible to fix this error, exit and tell the user they need to add more residues to get this to work
-			if (len(extra_FR1) + len(extra_FR4) < offset):
-				print "ERROR: Current DB does not cover the length of the framework " + chainType + " chain region of your query."
-				print "       We tried to extend the framework N and C-terminal regions of your query, but there is not enough sequence."
-				print "       You will need to extend the sequence of the " + chainType + " chain by at least " + str(offset - len(extra_FR1) - len(extra_FR4)) + " to use RosettaAntibody"
-				sys.exit(1)
-			# Maybe there's no extra space on either end of the framework, so try to extend the opposite end
-			if (len(extra_FR1) < FR1_offset):
-				n = FR1_offset - len(extra_FR1)
-				FR1_offset -= n
-				FR4_offset += n
-			elif (len(extra_FR4) < FR4_offset):
-				n = FR4_offset - len(extra_FR4)
-				FR4_offset -= n
-				FR1_offset += n
-			# Now finally fix the sequences
-			print_seq_FR_1 = extra_FR1[len(extra_FR1)-FR1_offset:] + print_seq_FR_1
-			print_seq_FR_4 = print_seq_FR_4 + extra_FR4[0:FR4_offset]
-			FR = print_seq_FR_1 + print_seq_FR_2 + print_seq_FR_3 + print_seq_FR_4
-			print "WARNING: The original length of the " + chainType + " chain did not match the database entries"
-			print "         We attempted to remedy this problem by extending the N and C-terminal flanking regions"
-			print "         to match the requirements of the database"
-			print "NOTE: This change will not affect the sequence of the query you uploaded, so the outputted antibody"
-			print "      will still have the sequence you uploaded"
-			print "New sequence: " + FR.strip()
-		elif (len(FR) == len1 + 1):
-			# Easy, just remove a residue from FR1
-			FR = FR[1:]
-			print "WARNING: The original length of the " + chainType + " chain did not match the database entries"
-			print "         We attempted to remedy this problem by removing a residue from the N-terminal framework region"
-			print "         to match the requirements of the database"
-			print "NOTE: This change will not affect the sequence of the query you uploaded, so the outputted antibody"
-			print "      will still have the sequence you uploaded"
-			print "New sequence: " + FR.strip()
-		elif (len(FR) > len2):
-			# Also easy, just take an equal number of residues off of each end
-			# Calculate how many extra residues we need to take off
-			offset = len(FR) - len2
-			# Try to take an equal number of extra residues from each side of the CDR region
-			if (offset % 2 == 0):
-				FR1_offset = offset / 2
-				FR4_offset = offset / 2
-			else:
-				FR1_offset = offset / 2 + 1
-				FR4_offset = offset / 2
-			FR = FR[FR1_offset:len(FR)-FR4_offset]
-			print "WARNING: The original length of the " + chainType + " chain did not match the database entries"
-			print "         We attempted to remedy this problem by removing residues from the N and C-terminal framework region"
-			print "         to match the requirements of the database"
-			print "NOTE: This change will not affect the sequence of the query you uploaded, so the outputted antibody"
-			print "      will still have the sequence you uploaded"
-			print "New sequence: " + FR.strip()
-		if (chainType == "light"):
-			FRL = FR
-			print_seq_FR_L1 = print_seq_FR_1
-			print_seq_FR_L2 = print_seq_FR_2
-			print_seq_FR_L3 = print_seq_FR_3
-			print_seq_FR_L4 = print_seq_FR_4
-		else:
-			FRH = FR
-			print_seq_FR_H1 = print_seq_FR_1
-			print_seq_FR_H2 = print_seq_FR_2
-			print_seq_FR_H3 = print_seq_FR_3
-			print_seq_FR_H4 = print_seq_FR_4
-	# END INSERTION
-	# ==========================================================================================================================
-
     if len(FRL) != 58 and len(FRL) != 60:
         print "ERROR: Current DB does not cover the length of FRL of your query."
         print "ERROR: FRL length of your query:", len(FRL)
@@ -1183,18 +1090,9 @@
 
         f_name = '\ '.join(f_name.split())
         commandline = '%s < %s.in > %s.out' % (Options.superimpose_profit, f_name, f_name)
-        # ==========================================================================================================================
-		# Edited by: Schenkelberg, Christian D.
-		# Date: 5-26-2015
-		# Problem: You need to register to use ProFit and the PyRosetta superimposition script does not work
-		# Solution: Use open-source PyMOL to do the superimposition instead
-		# BEGIN INSERTION
-        commandline = "python " + Options.antibody_database + "/../superimpose_pymol.py " + f_name + ".in"
-        print "Superimposing in PyMOL..."
-		# END INSERTION
-        # ==========================================================================================================================
         res, output = commands.getstatusoutput(commandline);
         if res: print commandline, output; sys.exit(1)
+
     pathPrefix = '\ '.join(vars()['prefix'].split())
     pathPrefix = pathPrefix[:-1] if pathPrefix.endswith('/') else pathPrefix
     res, output = commands.getstatusoutput('cat {0}/fitted.L.pdb {0}/fitted.H.pdb > {0}/FR.pdb'.format(pathPrefix))
@@ -1243,7 +1141,6 @@
                           ' -s %s.pdb -ignore_unrecognized_res -relax:fast -relax:constrain_relax_to_start_coords' % model_file_prefix + \
                           ' -relax:coord_constrain_sidechains -relax:ramp_constraints false -ex1 -ex2 -use_input_sc -scorefile score-relax.sf'
             res, output = commands.getstatusoutput(commandline)
-            print output
             if Options.verbose or res: print commandline, output
             if res: print 'Rosetta run terminated with Error!  Commandline: %s' % commandline; sys.exit(1)
             shutil.move(prefix + model_file_prefix + '_0001.pdb', prefix + model_file_prefix + '.relaxed.pdb');  model_file_prefix += '.relaxed'
